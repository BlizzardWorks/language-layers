#+TITLE: WIP Paper Outline
#+SUBTITLE:
#+AUTHOR: Steven Tammen
#+DATE: June 16, 2018
#+OPTIONS: toc:2


#+LaTeX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \setmainfont[BoldFont={Gentium Basic Bold}, ItalicFont={Gentium Basic Italic}]{Gentium Plus}

#+LaTeX_HEADER: \usepackage{polyglossia}
#+LaTeX_HEADER: \setmainlanguage{english}
#+LaTeX_HEADER: \setotherlanguage{hebrew}
#+LaTeX_HEADER: \newfontfamily\hebrewfont{SBL Hebrew}


* Section 1: Why?

** Why this project?

*** The lack of open source, /customizable/ software

*** The lack of software that works for nonstandard keyboard layouts

*** The lack of software that bundles multiple language layouts together

** Why this paper?

*** Justifying design choices

*** Creating a starting point for people that may have different opinions than myself

* Section 2: Nuts and bolts

** Keyboard layouts

*** Letters

*** Context-specific/alternate letter forms

*** Mandatory markup: vowel points, diacritics, etc.

*** Additional markup: metrical marks, cantillation marks, etc.

*** Punctuation; language-specific symbols

** Unicode

*** History, scope, and purpose; peculiarities

*** Precomposed and decomposed Unicode

*** Combining multiple diacritics

** Fonts

{Todo: [fn:1]}

*** An overview of existing options (for Greek and Hebrew)

- SBL Greek and Hebrew
- Gentium Plus and Ezra SIL
- Cardo
- New Athena Unicode
- Google Noto Font. Research.

* Section 3: The Unicode Language Layers project

** Sane defaults combined with ease of use

** Customizability as a first order priority

- Thorough API
- In-line comments
- Examples in the form of Greek and Hebrew layers

** Minimal interference with normal computer use

- Quick and easy on and off
- Consistent keyboard shortcuts (languages do not interfere with normal shortcuts)
- Leader-prefixed punctuation for normal behavior (for when punctuation gets hijacked by a layer for diacritics and so forth)

** Consistency across multiple languages

*** For end users

- Base markup for Latin, German, French, Italian, Spanish. Leader-prefixed diacritics.
- Switching between different alphabets; using different alphabets

*** For designers

- Consistent handling of precomposed and decomposed Unicode
- Abstracted, language-blind functions to extend to new languages with minimal effort
- If you understand how to code a layer for one language, you should be able to code layers for other different languages.

* Section 4: Greek as an example

** Letters

*** The relationship between memorability and speed

*** Native-language layouts in muscle memory

*** Issues in constructing associations

*** A Greek-English keymap 

** Context-specific/alternate letter forms

*** Final sigma

*** Lunate sigma

** Mandatory markup

*** Breathings

- smooth, rough
- vowels and rho

*** Accents

- acute, grave, circumflex

*** Iota subscripts

*** Diaeresis

*** The koronis

** Additional markup

*** Vowel quantity: macrons and breves

*** The underdot

** Punctuation; language-specific symbols

{Todo: [fn:2]}

*** Question marks and semicolons

*** A discussion of "hybrid" punctuation, and accessing normal punctuation when desired

* Section 5: Hebrew as an example

** Letters

*** Handling cases of identical letter sounds

*** A Hebrew-English keymap 

** Context-specific/alternate letter forms

*** Word final letters: the sofit forms

*** The Begadkephat letters

*** Shin and Sin

** Mandatory markup

*** A note about opinionated design decisions

- "Case study" -- the /matres lectionis/ letters. Automatically including vav and yod when they are vowel indicators.

*** Basic vowel points

*** Shva and reduced vowels

*** The dagesh

** Additional markup

*** The meteg

*** Cantillation marks

** Punctuation; language-specific symbols

*** A discussion of languages that use "mostly normal" punctuation (from the English point of view)

*** The geresh

*** The gershayim (lit. "double geresh" -- this word is plural)

*** Colon and /sof pasuq/

*** Vertical bar and /paseq/

*** Hyphen and /maqaf/

*** Shekel symbol

* Section 6: Efficient typing practice for non-native languages

** Introduction to efficient typing

*** Practicing based on word frequency

*** Practicing based on N-gram frequency; affixes

- (Derivational) Morphemes rather than words as a training focus

*** Abbreviating very frequent words and phrases

*** Practicing the sorts of texts you are going to type

** Creating necessary resources

*** Word frequency tables

- Perseus, TLG, handling overlapping forms

*** N-gram frequency tables

- Similar process. Handling semantic boundaries in regexes? How to automate morphological analysis without obvious delimiters like spaces for words?

*** Area-specific practice texts

- Downloading from free/uncopyrighted sources. Perseus, Project Gutenberg.[fn:3]

** Typing practice

*** Amphetype

*** Lesson generation from frequency tables and practice texts

** Crossover benefits

*** Vocabulary lists by frequency for specific domains

*** Morphological analysis and generative vocabulary

- Prefixes, suffixes, and roots. Developing an eye for picking up meanings automatically, simply by knowing what different parts of the word mean in general.

* Section 7: Pedagogical applications

** Orthography for digital natives

*** Standardization of letterforms

- Reducing the learning load in the first few weeks of Hebrew: block scripts and cursive scripts.
- Possible in handwritten as well (just only writing in block)

*** Typing speed and writing speed

*** But the permanence of handwriting

- Tests

** Examples of typing-related pedagogical aids for Greek

*** Learning the accentuation system

- Practicing the typing of accents while learning about the rule of contonation, morae, and recessive accents.

*** Common irregular verbs

-	Practicing the typing of certain very common irregular verbs (like /eimi/, e.g.) while simultaneously learning their paradigms.

*** Practicing reading/speaking Greek; "reading by typing"

-	Practicing typing in general by pulling in Greek texts from Perseus as typing training material. Students could be encouraged to also read the texts out loud as they type them. (Not necessarily understanding the Greek, but getting to see how it sounds and flows).

* Section 8: Concluding remarks

** Specific implementation benefits

*** Who should make the switch to this system? Is this project really worthwhile?

*** The low opportunity cost for the next generation

** Moving forward with more languages

*** Current project: focus on Greek with Hebrew as a foil

*** Possibility to expand much further

** Suggestions for further research

*** Corpus generation

*** Morphological analysis

*** Graphical frontends for customization

*** System APIs for keystream manipulations /across platforms/

*** AI autograders for language exercises

* Section 9: Appendix

** Integrating general electronic/online resources into classes

***  Language input as a pain point

- A lack of good keyboard input is a significant damper to the use of electronic/online resources.

*** The value of electronic/online resources

**** Elecronic lexica and morphology parsers

Dangers of over-reliance, but great benefits all the same. Arbitrary searches (those that require the ability to type native text) can be necessary when using paper sources rather than cross-linked sources like those on Perseus.

**** Searches

- Fuzzy search (i.e., lemma search), finding passages and references, searching on word usage or specific form.
- Searching typed notes, if people type class notes

**** Electronic flashcards

More polarizing whether or not they are useful, but making them easier to construct is definitely a good thing. Spaced repetition studying, Anki.

**** Autograded sentences

-	Practicing typing in general by providing form-fields to enter sentence translations. Depending on the difficulty of implementation, it might be possible to create an autograder for practice sentences in Athenaze, for example. If care was taken to follow vocabulary acquisition (so as to limit the lexicon input for the program and make it deterministic), it would be easy for professors to design supplemental/optional practice exercises that the students could complete with instant feedback and no extra work for the professor.

** Word Processing

*** Reasons why something other than Word might be desirable

- Automatic font use rather than manual switching

*** Example: Emacs' Org mode to PDF using XeLaTeX

- Support for RTL languages and automatic display
- Polyglossia
- Automatic font switches

*** Yudit?

{Todo: [fn:4]}

** Abbreviations

- More of a personal thing. Can algorithmically generate in theory. (Outside scope of this project).
- Probably good to look at the 10 or 15 most common words and see if anything jumps out at you
- Creating regex hotstrings in this particular AHK implementation

* Footnotes

[fn:1] Ideal font design + discussion

[fn:2] Metrical marks, special numerals, drachma symbol

[fn:3] Automate with script? Probably also outside scope of project.

[fn:4] Need to research more.

